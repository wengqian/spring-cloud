package com.wq.microservicenettywebsocket.server;import java.io.IOException;import java.util.concurrent.CopyOnWriteArraySet;import io.netty.handler.codec.http.HttpHeaders;import io.netty.handler.timeout.IdleStateEvent;import org.apache.commons.logging.Log;import org.apache.commons.logging.LogFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;import org.yeauty.annotation.*;import org.yeauty.pojo.ParameterMap;import org.yeauty.pojo.Session;import javax.websocket.server.PathParam;/** * 推送服务 * * @author wengqian */@ServerEndpoint(value = "/websocket", prefix = "netty-websocket")@Componentpublic class WebSocketClientServer {    static Log log = LogFactory.getLog(WebSocketClientServer.class);    //静态变量，用来记录当前在线连接数。应该把它设计成线程安全的。    private static int onlineCount = 0;    //concurrent包的线程安全Set，用来存放每个客户端对应的MyWebSocket对象。    private static CopyOnWriteArraySet<WebSocketClientServer> webSocketSet = new CopyOnWriteArraySet<WebSocketClientServer>();    //与某个客户端的连接会话，需要通过它来给客户端发送数据    private Session session;    //接收sid    private String sid = "";    @Autowired    WebSocketServer webSocketServer;    /**     * 连接建立成功调用的方法     */    @OnOpen    public void onOpen(Session session, HttpHeaders headers, ParameterMap parameterMap) {        this.session = session;        webSocketSet.add(this);     //加入set中        addOnlineCount();           //在线数加1        log.info("有新窗口开始监听:" + sid + ",当前在线人数为" + getOnlineCount());        this.sid = parameterMap.getParameter("sid");        this.sid = parameterMap.getParameter("group");        try {            sendMessage("连接成功");        } catch (IOException e) {            log.error("websocket IO异常");        }    }    /**     * 连接关闭调用的方法     *///    @OnClose//    public void onClose() {//        webSocketSet.remove(this);  //从set中删除//        subOnlineCount();           //在线数减1//        log.info("有一连接关闭！当前在线人数为" + getOnlineCount());//    }    @OnClose    public void onClose(Session session) throws IOException {        webSocketSet.remove(this);  //从set中删除        subOnlineCount();           //在线数减1        log.info("有一连接关闭！当前在线人数为" + getOnlineCount());        System.out.println("one connection closed");    }    /**     * 收到客户端消息后调用的方法     *     * @param message 客户端发送过来的消息     */    @OnMessage    public void onMessage(String message, Session session) {        log.info("收到来自窗口" + sid + "的信息:" + message);        //群发消息        for (WebSocketClientServer item : webSocketSet) {            try {                item.sendMessage(message);            } catch (IOException e) {                e.printStackTrace();            }        }    }    /**     * @param session     * @param error     */    @OnError    public void onError(Session session, Throwable error) {        log.error("发生错误");        error.printStackTrace();    }    @OnBinary    public void onBinary(Session session, byte[] bytes) {        for (byte b : bytes) {            System.out.println(b);        }        session.sendBinary(bytes);    }    @OnEvent    public void onEvent(Session session, Object evt) {        if (evt instanceof IdleStateEvent) {            IdleStateEvent idleStateEvent = (IdleStateEvent) evt;            switch (idleStateEvent.state()) {                case READER_IDLE:                    System.out.println("read idle");                    break;                case WRITER_IDLE:                    System.out.println("write idle");                    break;                case ALL_IDLE:                    System.out.println("all idle");                    break;                default:                    break;            }        }    }    /**     * 实现服务器主动推送     */    public void sendMessage(String message) throws IOException {        this.session.sendText(message);    }    /**     * 群发自定义消息     */    public static void sendInfo(String message, @PathParam("sid") String sid) throws IOException {        log.info("推送消息到窗口" + sid + "，推送内容:" + message);        for (WebSocketClientServer item : webSocketSet) {            try {                //这里可以设定只推送给这个sid的，为null则全部推送                if (sid == null) {                    item.sendMessage(message);                } else if (item.sid.equals(sid)) {                    item.sendMessage(message);                }            } catch (IOException e) {                continue;            }        }    }    public static synchronized int getOnlineCount() {        return onlineCount;    }    public static synchronized void addOnlineCount() {        WebSocketClientServer.onlineCount++;    }    public static synchronized void subOnlineCount() {        WebSocketClientServer.onlineCount--;    }}